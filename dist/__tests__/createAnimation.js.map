{"version":3,"sources":["../../__tests__/createAnimation.js"],"names":["describe","it","expect","from","opacity","to","toEqual","inputRange","outputRange","toThrow","transform","translateY","scale"],"mappings":"AAEA,mD,kJAEAA,SAAS,iBAAT,CAA4B,UAAM,CAChCC,GAAG,iCAAH,CAAsC,UAAM,CAC1CC,OAAO,8BAAgB,CACrBC,KAAM,CACJC,QAAS,CADL,CADe,CAIrBC,GAAI,CACFD,QAAS,CADP,CAJiB,CAAhB,CAAP,EAOIE,OAPJ,CAOY,CACVF,QAAS,CACPG,WAAY,CAAC,CAAD,CAAI,CAAJ,CADL,CAEPC,YAAa,CAAC,CAAD,CAAI,CAAJ,CAFN,CADC,CAPZ,EAaD,CAdD,EAgBAP,GAAG,mCAAH,CAAwC,UAAM,CAC5CC,OAAO,8BAAgB,CACrB,EAAG,CACDE,QAAS,CADR,CADkB,CAIrB,EAAG,CACDA,QAAS,CADR,CAJkB,CAAhB,CAAP,EAOIE,OAPJ,CAOY,CACVF,QAAS,CACPG,WAAY,CAAC,CAAD,CAAI,CAAJ,CADL,CAEPC,YAAa,CAAC,CAAD,CAAI,CAAJ,CAFN,CADC,CAPZ,EAaD,CAdD,EAgBAP,GAAG,8CAAH,CAAmD,UAAM,CACvDC,OAAO,iBAAM,8BAAgB,CAC3BC,KAAM,CACJC,QAAS,CADL,CADqB,CAAhB,CAAN,EAAP,EAIIK,OAJJ,CAIY,sDAJZ,EAKD,CAND,EAQAR,GAAG,6CAAH,CAAkD,UAAM,CACtDC,OAAO,8BAAgB,CACrBC,KAAM,CACJO,UAAW,CAAC,CACVC,WAAY,CADF,CAAD,CADP,CADe,CAMrBN,GAAI,CACFK,UAAW,CAAC,CACVC,WAAY,EADF,CAAD,CADT,CANiB,CAAhB,CAAP,EAWIL,OAXJ,CAWY,CACVK,WAAY,CACVJ,WAAY,CAAC,CAAD,CAAI,CAAJ,CADF,CAEVC,YAAa,CAAC,CAAD,CAAI,EAAJ,CAFH,CADF,CAXZ,EAiBD,CAlBD,EAoBAP,GAAG,iEAAH,CAAsE,UAAM,CAC1EC,OAAO,8BAAgB,CACrB,EAAG,CACDQ,UAAW,CAAC,CACVE,MAAO,CADG,CAAD,CADV,CAIDR,QAAS,CAJR,CADkB,CAOrB,IAAK,CACHM,UAAW,CAAC,CACVE,MAAO,CADG,CAAD,CADR,CAPgB,CAYrB,EAAG,CACDR,QAAS,CADR,CAZkB,CAAhB,CAAP,EAeIE,OAfJ,CAeY,CACVM,MAAO,CACLL,WAAY,CAAC,CAAD,CAAI,GAAJ,CADP,CAELC,YAAa,CAAC,CAAD,CAAI,CAAJ,CAFR,CADG,CAKVJ,QAAS,CACPG,WAAY,CAAC,CAAD,CAAI,CAAJ,CADL,CAEPC,YAAa,CAAC,CAAD,CAAI,CAAJ,CAFN,CALC,CAfZ,EAyBD,CA1BD,EA2BD,CAxFD","file":"createAnimation.js","sourcesContent":["/* eslint-env jest */\n\nimport createAnimation from '../createAnimation';\n\ndescribe('createAnimation', () => {\n  it('should support from and to keys', () => {\n    expect(createAnimation({\n      from: {\n        opacity: 0,\n      },\n      to: {\n        opacity: 1,\n      },\n    })).toEqual({\n      opacity: {\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n      },\n    });\n  });\n\n  it('should support fraction keyframes', () => {\n    expect(createAnimation({\n      0: {\n        opacity: 0,\n      },\n      1: {\n        opacity: 1,\n      },\n    })).toEqual({\n      opacity: {\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n      },\n    });\n  });\n\n  it('should throw if only one keyframe is defined', () => {\n    expect(() => createAnimation({\n      from: {\n        opacity: 1,\n      },\n    })).toThrow('Animation definitions must have at least two values.');\n  });\n\n  it('should support and flatten transform values', () => {\n    expect(createAnimation({\n      from: {\n        transform: [{\n          translateY: 0,\n        }],\n      },\n      to: {\n        transform: [{\n          translateY: 10,\n        }],\n      },\n    })).toEqual({\n      translateY: {\n        inputRange: [0, 1],\n        outputRange: [0, 10],\n      },\n    });\n  });\n\n  it('should support and multiple properties with different keyframes', () => {\n    expect(createAnimation({\n      0: {\n        transform: [{\n          scale: 0,\n        }],\n        opacity: 0,\n      },\n      0.8: {\n        transform: [{\n          scale: 1,\n        }],\n      },\n      1: {\n        opacity: 1,\n      },\n    })).toEqual({\n      scale: {\n        inputRange: [0, 0.8],\n        outputRange: [0, 1],\n      },\n      opacity: {\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n      },\n    });\n  });\n});\n"]}