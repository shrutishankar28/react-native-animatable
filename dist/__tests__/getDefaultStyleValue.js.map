{"version":3,"sources":["../../__tests__/getDefaultStyleValue.js"],"names":["describe","it","expect","toEqual","margin","marginVertical","padding","paddingVertical"],"mappings":"AAEA,6D,4JAEAA,SAAS,sBAAT,CAAiC,UAAM,CACrCC,GAAG,6CAAH,CAAkD,UAAM,CACtDC,OAAO,mCAAqB,OAArB,CAAP,EAAsCC,OAAtC,CAA8C,MAA9C,EACAD,OAAO,mCAAqB,OAArB,CAAP,EAAsCC,OAAtC,CAA8C,MAA9C,EACAD,OAAO,mCAAqB,SAArB,CAAP,EAAwCC,OAAxC,CAAgD,MAAhD,EACAD,OAAO,mCAAqB,SAArB,CAAP,EAAwCC,OAAxC,CAAgD,MAAhD,EACD,CALD,EAOAF,GAAG,oCAAH,CAAyC,UAAM,CAC7CC,OAAO,mCAAqB,WAArB,CAAkC,CAAEE,OAAQ,EAAV,CAAlC,CAAP,EAA0DD,OAA1D,CAAkE,EAAlE,EACAD,OAAO,mCAAqB,WAArB,CAAkC,CAAEG,eAAgB,EAAlB,CAAlC,CAAP,EAAkEF,OAAlE,CAA0E,EAA1E,EACAD,OAAO,mCAAqB,YAArB,CAAmC,CAAEE,OAAQ,EAAV,CAAnC,CAAP,EAA2DD,OAA3D,CAAmE,EAAnE,EACAD,OAAO,mCAAqB,YAArB,CAAmC,CAAEG,eAAgB,EAAlB,CAAnC,CAAP,EAAmEF,OAAnE,CAA2E,CAA3E,EACAD,OAAO,mCAAqB,kBAArB,CAAyC,CAAEE,OAAQ,EAAV,CAAzC,CAAP,EAAiED,OAAjE,CAAyE,EAAzE,EACD,CAND,EAQAF,GAAG,qCAAH,CAA0C,UAAM,CAC9CC,OAAO,mCAAqB,YAArB,CAAmC,CAAEI,QAAS,EAAX,CAAnC,CAAP,EAA4DH,OAA5D,CAAoE,EAApE,EACAD,OAAO,mCAAqB,YAArB,CAAmC,CAAEK,gBAAiB,EAAnB,CAAnC,CAAP,EAAoEJ,OAApE,CAA4E,EAA5E,EACAD,OAAO,mCAAqB,aAArB,CAAoC,CAAEI,QAAS,EAAX,CAApC,CAAP,EAA6DH,OAA7D,CAAqE,EAArE,EACAD,OAAO,mCAAqB,aAArB,CAAoC,CAAEK,gBAAiB,EAAnB,CAApC,CAAP,EAAqEJ,OAArE,CAA6E,CAA7E,EACAD,OAAO,mCAAqB,mBAArB,CAA0C,CAAEI,QAAS,EAAX,CAA1C,CAAP,EAAmEH,OAAnE,CAA2E,EAA3E,EACD,CAND,EAOD,CAvBD","file":"getDefaultStyleValue.js","sourcesContent":["/* eslint-env jest */\n\nimport getDefaultStyleValue from '../getDefaultStyleValue';\n\ndescribe('getDefaultStyleValue', () => {\n  it('should return 0deg for skew and rotate keys', () => {\n    expect(getDefaultStyleValue('skewX')).toEqual('0deg');\n    expect(getDefaultStyleValue('skewY')).toEqual('0deg');\n    expect(getDefaultStyleValue('rotateX')).toEqual('0deg');\n    expect(getDefaultStyleValue('rotateY')).toEqual('0deg');\n  });\n\n  it('should fallback to general margins', () => {\n    expect(getDefaultStyleValue('marginTop', { margin: 10 })).toEqual(10);\n    expect(getDefaultStyleValue('marginTop', { marginVertical: 10 })).toEqual(10);\n    expect(getDefaultStyleValue('marginLeft', { margin: 10 })).toEqual(10);\n    expect(getDefaultStyleValue('marginLeft', { marginVertical: 10 })).toEqual(0);\n    expect(getDefaultStyleValue('marginHorizontal', { margin: 10 })).toEqual(10);\n  });\n\n  it('should fallback to general paddings', () => {\n    expect(getDefaultStyleValue('paddingTop', { padding: 10 })).toEqual(10);\n    expect(getDefaultStyleValue('paddingTop', { paddingVertical: 10 })).toEqual(10);\n    expect(getDefaultStyleValue('paddingLeft', { padding: 10 })).toEqual(10);\n    expect(getDefaultStyleValue('paddingLeft', { paddingVertical: 10 })).toEqual(0);\n    expect(getDefaultStyleValue('paddingHorizontal', { padding: 10 })).toEqual(10);\n  });\n});\n"]}