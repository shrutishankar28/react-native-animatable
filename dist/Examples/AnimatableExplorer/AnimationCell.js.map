{"version":3,"sources":["../../../Examples/AnimatableExplorer/AnimationCell.js"],"names":["styles","StyleSheet","create","cell","padding","marginBottom","marginHorizontal","name","color","fontSize","textAlign","AnimationCell","ref","handleRef","handlePress","props","onPress","animationType","backgroundColor","useNativeDriver","PureComponent","propTypes","PropTypes","string","isRequired","func","bool"],"mappings":"unBAAA,4B,2CACA,qC,mDACA,yCACA,8D,i4BAEA,GAAMA,QAASC,wBAAWC,MAAX,CAAkB,CAC/BC,KAAM,CACJC,QAAS,EADL,CAEJC,aAAc,EAFV,CAGJC,iBAAkB,EAHd,CADyB,CAM/BC,KAAM,CACJC,MAAO,OADH,CAEJC,SAAU,EAFN,CAGJC,UAAW,QAHP,CANyB,CAAlB,CAAf,C,GAaqBC,c,mbAQnBC,G,CAAM,I,OACNC,S,CAAY,aAAO,CACjB,MAAKD,GAAL,CAAWA,GAAX,CACD,C,OAEDE,W,CAAc,UAAM,CAClB,GAAI,MAAKF,GAAL,EAAY,MAAKG,KAAL,CAAWC,OAA3B,CAAoC,CAClC,MAAKD,KAAL,CAAWC,OAAX,CAAmB,MAAKJ,GAAxB,CAA6B,MAAKG,KAAL,CAAWE,aAAxC,EACD,CACF,C,iHAEQ,CACP,MACE,+BAAC,qCAAD,EAA0B,QAAS,KAAKH,WAAxC,iDACE,8BAAC,2BAAD,EACE,IAAK,KAAKD,SADZ,CAEE,MAAO,CAAC,CAAEK,gBAAiB,KAAKH,KAAL,CAAWP,KAA9B,CAAD,CAAwCR,OAAOG,IAA/C,CAFT,CAGE,gBAAiB,KAAKY,KAAL,CAAWI,eAH9B,iDAKE,8BAAC,iBAAD,EAAM,MAAOnB,OAAOO,IAApB,iDAA2B,KAAKQ,KAAL,CAAWE,aAAtC,CALF,CADF,CADF,CAWD,C,2BA/BwCG,oB,EAAtBT,a,CACZU,S,CAAY,CACjBJ,cAAeK,oBAAUC,MAAV,CAAiBC,UADf,CAEjBhB,MAAOc,oBAAUC,MAAV,CAAiBC,UAFP,CAGjBR,QAASM,oBAAUG,IAAV,CAAeD,UAHP,CAIjBL,gBAAiBG,oBAAUI,IAAV,CAAeF,UAJf,C,iBADAb,a","file":"AnimationCell.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, TouchableWithoutFeedback } from 'react-native';\nimport { View } from 'react-native-animatable';\n\nconst styles = StyleSheet.create({\n  cell: {\n    padding: 16,\n    marginBottom: 10,\n    marginHorizontal: 10,\n  },\n  name: {\n    color: 'white',\n    fontSize: 16,\n    textAlign: 'center',\n  },\n});\n\nexport default class AnimationCell extends PureComponent {\n  static propTypes = {\n    animationType: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    onPress: PropTypes.func.isRequired,\n    useNativeDriver: PropTypes.bool.isRequired,\n  };\n\n  ref = null;\n  handleRef = ref => {\n    this.ref = ref;\n  };\n\n  handlePress = () => {\n    if (this.ref && this.props.onPress) {\n      this.props.onPress(this.ref, this.props.animationType);\n    }\n  };\n\n  render() {\n    return (\n      <TouchableWithoutFeedback onPress={this.handlePress}>\n        <View\n          ref={this.handleRef}\n          style={[{ backgroundColor: this.props.color }, styles.cell]}\n          useNativeDriver={this.props.useNativeDriver}\n        >\n          <Text style={styles.name}>{this.props.animationType}</Text>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n"]}